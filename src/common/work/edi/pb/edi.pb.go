// Code generated by protoc-gen-go. DO NOT EDIT.
// source: edi.proto

package EDIgRpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EDIRequest struct {
	Method               string   `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Params               string   `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EDIRequest) Reset()         { *m = EDIRequest{} }
func (m *EDIRequest) String() string { return proto.CompactTextString(m) }
func (*EDIRequest) ProtoMessage()    {}
func (*EDIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_184d4dc8ed712ec4, []int{0}
}

func (m *EDIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EDIRequest.Unmarshal(m, b)
}
func (m *EDIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EDIRequest.Marshal(b, m, deterministic)
}
func (m *EDIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EDIRequest.Merge(m, src)
}
func (m *EDIRequest) XXX_Size() int {
	return xxx_messageInfo_EDIRequest.Size(m)
}
func (m *EDIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EDIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EDIRequest proto.InternalMessageInfo

func (m *EDIRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *EDIRequest) GetParams() string {
	if m != nil {
		return m.Params
	}
	return ""
}

type EDIResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EDIResponse) Reset()         { *m = EDIResponse{} }
func (m *EDIResponse) String() string { return proto.CompactTextString(m) }
func (*EDIResponse) ProtoMessage()    {}
func (*EDIResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_184d4dc8ed712ec4, []int{1}
}

func (m *EDIResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EDIResponse.Unmarshal(m, b)
}
func (m *EDIResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EDIResponse.Marshal(b, m, deterministic)
}
func (m *EDIResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EDIResponse.Merge(m, src)
}
func (m *EDIResponse) XXX_Size() int {
	return xxx_messageInfo_EDIResponse.Size(m)
}
func (m *EDIResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EDIResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EDIResponse proto.InternalMessageInfo

func (m *EDIResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*EDIRequest)(nil), "EDIgRpc.EDIRequest")
	proto.RegisterType((*EDIResponse)(nil), "EDIgRpc.EDIResponse")
}

func init() { proto.RegisterFile("edi.proto", fileDescriptor_184d4dc8ed712ec4) }

var fileDescriptor_184d4dc8ed712ec4 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x4d, 0xc9, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x77, 0x75, 0xf1, 0x4c, 0x0f, 0x2a, 0x48, 0x56, 0xb2,
	0xe1, 0xe2, 0x72, 0x75, 0xf1, 0x0c, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe3, 0x62,
	0xcb, 0x4d, 0x2d, 0xc9, 0xc8, 0x4f, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf2, 0x40,
	0xe2, 0x05, 0x89, 0x45, 0x89, 0xb9, 0xc5, 0x12, 0x4c, 0x10, 0x71, 0x08, 0x4f, 0x49, 0x95, 0x8b,
	0x1b, 0xac, 0xbb, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x15, 0xa4, 0xac, 0x28, 0xb5, 0xb8, 0x34, 0xa7,
	0x04, 0xa6, 0x1d, 0xc2, 0x33, 0x9a, 0xc9, 0xc4, 0x05, 0xb2, 0xd0, 0x39, 0x31, 0x27, 0x47, 0xc8,
	0x98, 0x8b, 0x05, 0x4c, 0x0b, 0xeb, 0x41, 0x9d, 0xa0, 0x87, 0xb0, 0x5f, 0x4a, 0x04, 0x55, 0x10,
	0x62, 0xac, 0x12, 0x83, 0x90, 0x0b, 0x97, 0x70, 0x70, 0x6a, 0x51, 0x59, 0x6a, 0x51, 0x70, 0x49,
	0x51, 0x6a, 0x62, 0x6e, 0x66, 0x5e, 0x3a, 0xc9, 0x66, 0x18, 0x30, 0x82, 0x4c, 0x71, 0xce, 0xc9,
	0x4c, 0xcd, 0x2b, 0x21, 0xdf, 0x14, 0x0d, 0x46, 0x21, 0x5f, 0x2e, 0x29, 0xa7, 0xcc, 0x94, 0xcc,
	0xa2, 0xd4, 0xe4, 0x92, 0xcc, 0xfc, 0xbc, 0xc4, 0x1c, 0x4a, 0x0c, 0x33, 0x60, 0x74, 0xe2, 0x5d,
	0xc5, 0xc4, 0xe5, 0x1a, 0xec, 0xe4, 0x98, 0x92, 0x58, 0x50, 0x92, 0x5a, 0x94, 0xc4, 0x06, 0x8e,
	0x1f, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x94, 0xb8, 0x25, 0xac, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EDICallClient is the client API for EDICall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EDICallClient interface {
	Call(ctx context.Context, in *EDIRequest, opts ...grpc.CallOption) (*EDIResponse, error)
	ServerStreamingCall(ctx context.Context, in *EDIRequest, opts ...grpc.CallOption) (EDICall_ServerStreamingCallClient, error)
	ClientStreamingCall(ctx context.Context, opts ...grpc.CallOption) (EDICall_ClientStreamingCallClient, error)
	BidirectionalStreamingCall(ctx context.Context, opts ...grpc.CallOption) (EDICall_BidirectionalStreamingCallClient, error)
}

type eDICallClient struct {
	cc *grpc.ClientConn
}

func NewEDICallClient(cc *grpc.ClientConn) EDICallClient {
	return &eDICallClient{cc}
}

func (c *eDICallClient) Call(ctx context.Context, in *EDIRequest, opts ...grpc.CallOption) (*EDIResponse, error) {
	out := new(EDIResponse)
	err := c.cc.Invoke(ctx, "/EDIgRpc.EDICall/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eDICallClient) ServerStreamingCall(ctx context.Context, in *EDIRequest, opts ...grpc.CallOption) (EDICall_ServerStreamingCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EDICall_serviceDesc.Streams[0], "/EDIgRpc.EDICall/ServerStreamingCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &eDICallServerStreamingCallClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EDICall_ServerStreamingCallClient interface {
	Recv() (*EDIResponse, error)
	grpc.ClientStream
}

type eDICallServerStreamingCallClient struct {
	grpc.ClientStream
}

func (x *eDICallServerStreamingCallClient) Recv() (*EDIResponse, error) {
	m := new(EDIResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eDICallClient) ClientStreamingCall(ctx context.Context, opts ...grpc.CallOption) (EDICall_ClientStreamingCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EDICall_serviceDesc.Streams[1], "/EDIgRpc.EDICall/ClientStreamingCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &eDICallClientStreamingCallClient{stream}
	return x, nil
}

type EDICall_ClientStreamingCallClient interface {
	Send(*EDIRequest) error
	CloseAndRecv() (*EDIResponse, error)
	grpc.ClientStream
}

type eDICallClientStreamingCallClient struct {
	grpc.ClientStream
}

func (x *eDICallClientStreamingCallClient) Send(m *EDIRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eDICallClientStreamingCallClient) CloseAndRecv() (*EDIResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EDIResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eDICallClient) BidirectionalStreamingCall(ctx context.Context, opts ...grpc.CallOption) (EDICall_BidirectionalStreamingCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EDICall_serviceDesc.Streams[2], "/EDIgRpc.EDICall/BidirectionalStreamingCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &eDICallBidirectionalStreamingCallClient{stream}
	return x, nil
}

type EDICall_BidirectionalStreamingCallClient interface {
	Send(*EDIRequest) error
	Recv() (*EDIResponse, error)
	grpc.ClientStream
}

type eDICallBidirectionalStreamingCallClient struct {
	grpc.ClientStream
}

func (x *eDICallBidirectionalStreamingCallClient) Send(m *EDIRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eDICallBidirectionalStreamingCallClient) Recv() (*EDIResponse, error) {
	m := new(EDIResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EDICallServer is the server API for EDICall service.
type EDICallServer interface {
	Call(context.Context, *EDIRequest) (*EDIResponse, error)
	ServerStreamingCall(*EDIRequest, EDICall_ServerStreamingCallServer) error
	ClientStreamingCall(EDICall_ClientStreamingCallServer) error
	BidirectionalStreamingCall(EDICall_BidirectionalStreamingCallServer) error
}

// UnimplementedEDICallServer can be embedded to have forward compatible implementations.
type UnimplementedEDICallServer struct {
}

func (*UnimplementedEDICallServer) Call(ctx context.Context, req *EDIRequest) (*EDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (*UnimplementedEDICallServer) ServerStreamingCall(req *EDIRequest, srv EDICall_ServerStreamingCallServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingCall not implemented")
}
func (*UnimplementedEDICallServer) ClientStreamingCall(srv EDICall_ClientStreamingCallServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingCall not implemented")
}
func (*UnimplementedEDICallServer) BidirectionalStreamingCall(srv EDICall_BidirectionalStreamingCallServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingCall not implemented")
}

func RegisterEDICallServer(s *grpc.Server, srv EDICallServer) {
	s.RegisterService(&_EDICall_serviceDesc, srv)
}

func _EDICall_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EDIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EDICallServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EDIgRpc.EDICall/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EDICallServer).Call(ctx, req.(*EDIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EDICall_ServerStreamingCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EDIRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EDICallServer).ServerStreamingCall(m, &eDICallServerStreamingCallServer{stream})
}

type EDICall_ServerStreamingCallServer interface {
	Send(*EDIResponse) error
	grpc.ServerStream
}

type eDICallServerStreamingCallServer struct {
	grpc.ServerStream
}

func (x *eDICallServerStreamingCallServer) Send(m *EDIResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EDICall_ClientStreamingCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EDICallServer).ClientStreamingCall(&eDICallClientStreamingCallServer{stream})
}

type EDICall_ClientStreamingCallServer interface {
	SendAndClose(*EDIResponse) error
	Recv() (*EDIRequest, error)
	grpc.ServerStream
}

type eDICallClientStreamingCallServer struct {
	grpc.ServerStream
}

func (x *eDICallClientStreamingCallServer) SendAndClose(m *EDIResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eDICallClientStreamingCallServer) Recv() (*EDIRequest, error) {
	m := new(EDIRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EDICall_BidirectionalStreamingCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EDICallServer).BidirectionalStreamingCall(&eDICallBidirectionalStreamingCallServer{stream})
}

type EDICall_BidirectionalStreamingCallServer interface {
	Send(*EDIResponse) error
	Recv() (*EDIRequest, error)
	grpc.ServerStream
}

type eDICallBidirectionalStreamingCallServer struct {
	grpc.ServerStream
}

func (x *eDICallBidirectionalStreamingCallServer) Send(m *EDIResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eDICallBidirectionalStreamingCallServer) Recv() (*EDIRequest, error) {
	m := new(EDIRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EDICall_serviceDesc = grpc.ServiceDesc{
	ServiceName: "EDIgRpc.EDICall",
	HandlerType: (*EDICallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _EDICall_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingCall",
			Handler:       _EDICall_ServerStreamingCall_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingCall",
			Handler:       _EDICall_ClientStreamingCall_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamingCall",
			Handler:       _EDICall_BidirectionalStreamingCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "edi.proto",
}
